name: Resuable Build and Publish


on:
  workflow_call:
    inputs:
      registry:
        description: 'The registry to login to'
        required: false
        type: string
        default: 'quay.io/zncdatadev'
      cache-registry:
        description: 'The cache registry to login to'
        required: false
        type: string
        default: 'quay.io/zncdatadev-test'
      kubedoop_version:
        description: 'The kubedoop version'
        required: false
        type: string
        default: '0.0.0-dev'
      target:
        description: |
          The target to build. If build a tag without version, just use the name. we will build all versions of the container.
        required: true
        type: string
      push:
        description: |
          Push the image to registry after build.
        required: false
        type: boolean
        default: false
      sign:
        description: |
          Sign the image after build.
        required: false
        type: boolean
        default: false


jobs:
  triage:
    runs-on: ubuntu-20.04
    steps:
      - name: Show Usage
        run: |
          free -h
          df -h
          lsblk

      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Show version
        run: |
          docker info
      - name: Free Space
        run: |
          echo "::group::Show disk space before"
          echo "INFO: show free space"
          free -h
          df -h
          lsblk
          lscpu

          echo "::endgroup::"


          echo "::group::Free up space"

          echo "INFO: Remove Android SDK"
          sudo rm -rf /usr/local/lib/android || true

          echo "INFO: Remove apt cache"
          sudo apt-get remove -y --fix-missing \
            '^aspnetcore-.*' \
            '^dotnet-.*' \
            '^llvm-.*' \
            'php.*' \
            '^mongodb-.*' \
            '^mysql-.*' \
            azure-cli \
            google-cloud-sdk \
            google-cloud-cli \
            google-chrome-stable \
            firefox \
            powershell \
            mono-devel \
            libgl1-mesa-dri
          sudo apt-get autoremove -y
          sudo apt-get clean -y

          echo "INFO: Remove .NET runtime"
          sudo rm -rf /usr/share/dotnet || true

          echo "INFO: Remove Haskell runtime"
          sudo rm -rf /opt/ghc || true
          sudo rm -rf /usr/local/.ghcup || true

          echo "INFO: Remove Docker images"
          sudo docker image prune --all --force || true

          echo "INFO: Remove Agent tool cache"
          sudo rm -rf "$AGENT_TOOLSDIRECTORY" || true

          echo "INFO: Remove Swap storage"
          sudo swapoff -a || true
          sudo rm -f /mnt/swapfile || true
          free -h

          echo "::endgroup::"


          echo "::group::Show disk space after"
          echo "INFO: show free space"
          free -h
          df -h
          lsblk
          echo "::endgroup::"

      - name: Login to Quay.io
        run: |
          if [ -n "${{ secrets.QUAY_USERNAME }}" ] && [ -n "${{ secrets.QUAY_PASSWORD }}" ]; then
            echo "${{ secrets.QUAY_PASSWORD }}" | docker login -u "${{ secrets.QUAY_USERNAME }}" --password-stdin quay.io
          fi

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Start Resource Monitor
        env:
          TARGET: ${{ inputs.target }}
        run: |
          # 处理 TARGET 名称，替换特殊字符
          SAFE_TARGET=$(echo "$TARGET" | tr ':/' '_')
          MONITOR_FILE="${SAFE_TARGET}_monitor.csv"

          # create a script to monitor resource usage
          cat << 'EOF' > monitor.sh
          #!/bin/bash
          OUTPUT_FILE="${1:-resource_monitor.csv}"
          echo "timestamp,cpu_usage,memory_used,memory_total,disk_used,disk_total" > "$OUTPUT_FILE"
          while true; do
            timestamp=$(date '+%Y-%m-%d %H:%M:%S')
            cpu_usage=$(top -bn1 | grep "Cpu(s)" | awk '{print $2}')
            memory_info=$(free -m | grep Mem)
            memory_used=$(echo $memory_info | awk '{print $3}')
            memory_total=$(echo $memory_info | awk '{print $2}')
            disk_info=$(df -m / | tail -1)
            disk_used=$(echo $disk_info | awk '{print $3}')
            disk_total=$(echo $disk_info | awk '{print $2}')
            echo "$timestamp,$cpu_usage,$memory_used,$memory_total,$disk_used,$disk_total" >> "$OUTPUT_FILE"
            sleep 5
          done
          EOF

          chmod +x monitor.sh
          ./monitor.sh "$MONITOR_FILE" &

          echo "SAFE_TARGET=$SAFE_TARGET" >> $GITHUB_ENV
          echo "MONITOR_FILE=$MONITOR_FILE" >> $GITHUB_ENV
          echo "MONITOR_PID=$!" >> $GITHUB_ENV

      - name: Build and Publish
        env:
          REGISTRY: ${{ inputs.registry }}
          CACHE_REGISTRY: ${{ inputs.cache-registry }}
          PUSH: ${{ inputs.push }}
          SIGN: ${{ inputs.sign }}
          TARGET: ${{ inputs.target }}
        run: |
          cmd=('.scripts/build.sh')

          if [ "$PUSH" = "true" ]; then
            cmd+=('--push')
          fi

          if [ "$SIGN" = "true" ]; then
            cmd+=('--sign')
          fi

          # check target is blank
          if [ -z "$TARGET" ]; then
            echo "ERROR: Target is blank"
            exit 1
          fi

          cmd+=("$TARGET")

          echo "::group::Build and Publish"
          echo "INFO: Running ${cmd[@]}"
          "${cmd[@]}"
          echo "::endgroup::"

      - name: Stop Resource Monitor
        if: always()
        run: |
          kill ${{ env.MONITOR_PID }} || true
          sleep 1

      - name: Upload Resource Monitor Results
        if: always()
        uses: actions/upload-artifact@v4.5.0
        with:
          name: ${{ env.SAFE_TARGET }}-monitor-results
          path: ${{ env.MONITOR_FILE }}
          retention-days: 5
