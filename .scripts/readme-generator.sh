#!/bin/bash

set -eo pipefail

# Get script directory and change to project root
SCRIPT_DIR=$(cd "$(dirname "${BASH_SOURCE[0]}")" &> /dev/null && pwd)
cd "$(dirname "$SCRIPT_DIR")"

# Get script filename
SCRIPT_NAME=$(basename "$0")

# Get and sort all workflow product names
products=($(ls .github/workflows/build_*.yaml | sed -n 's/.*build_\(.*\)\.yaml/\1/p' | sort))

# Debug: Print found products
echo "Found products: ${products[@]}"

# Generate table content
generate_table() {
    local count=${#products[@]}
    local cols=4
    local rows=$(( (count + cols - 1) / cols ))
    local content=""

    # Generate blank header row
    content+="|      |      |      |      |\n"
    # Generate alignment row
    content+="| ---: | ---: | ---: | ---: |\n"

    for ((i=0; i<rows; i++)); do
        local row="|"
        for ((j=0; j<cols; j++)); do
            idx=$((i * cols + j))
            if [ $idx -lt $count ]; then
                # badge link format: [![image-url]][workflow-url]
                row+=" [![Build ${products[idx]}]][build_${products[idx]}.yaml] |"
            else
                row+=" |"
            fi
        done
        content+="$row\n"
    done

    # Escape newlines
    echo "${content//$'\n'/\\n}"
}

# Generate reference links
generate_links() {
    local content=""
    for product in "${products[@]}"; do
        # 仅生成徽标图片链接，不再需要Build链接的引用
        content+="[Build ${product}]: https://github.com/zncdatadev/containers/actions/workflows/build_${product}.yaml/badge.svg\n"
        content+="[build_${product}.yaml]: https://github.com/zncdatadev/containers/actions/workflows/build_${product}.yaml\n"
    done

    # Escape newlines
    echo "${content//$'\n'/\\n}"
}

# Update README.md file
update_readme() {
    local temp_file=$(mktemp)
    awk -v table="$1" -v links="$2" -v script="$SCRIPT_NAME" '
        /<!-- start:bages generated by/ {
            print "<!-- start:bages generated by " script " -->";
            print table;
            in_badges=1
            next
        }
        /<!-- end:bages -->/ {
            in_badges=0
        }
        /<!-- start:links generated by/ {
            print "<!-- start:links generated by " script " -->";
            print links;
            in_links=1
            next
        }
        /<!-- end:links -->/ {
            in_links=0
        }
        !in_badges && !in_links {
            print
        }
    ' README.md > "$temp_file"

    mv "$temp_file" README.md
}

# Main process
table_content=$(generate_table)
links_content=$(generate_links)
update_readme "$table_content" "$links_content"
